// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CoinTools
import Alamofire
import Charts
@_exported import CoinTools
import Foundation
import SnapKit
import Swift
import SwiftTheme
import UIKit
import _Concurrency
extension CoinTools.RZColorfulSwiftBase where T : UIKit.UIView {
  public func tap(_ handler: @escaping ((UIKit.UIView) -> Swift.Void))
  public func tap(_ numberOfTouches: Swift.Int, _ numberOfTaps: Swift.Int, _ handler: @escaping ((UIKit.UIView) -> Swift.Void))
}
@_inheritsConvenienceInitializers @objc open class LFRequestManager : ObjectiveC.NSObject {
  @objc public class func requestCancel()
  @objc public class func requestUrlCancel(url: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public typealias ReqRsponseSuccess = (_ response: Swift.AnyObject, _ cacheUrl: Swift.String) -> Swift.Void
public typealias ReqResponseFail = (_ error: Swift.AnyObject) -> Swift.Void
public typealias NetworkStatus = (_ HTNetworkStatus: Swift.Int32) -> Swift.Void
@objc public enum HTNetworkStatus : Swift.Int32 {
  case publicHttpUnknow = -1
  case HttpNoReachable = 0
  case HttpWwan = 1
  case HttpWifi = 2
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum methodType {
  case RequestMethodGet
  case RequestMethodPost
  public static func == (a: CoinTools.methodType, b: CoinTools.methodType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class HttpNetWork : ObjectiveC.NSObject {
  @objc public class func getRequestWith(url: Swift.String, params: [Swift.String : Any]?, success: @escaping CoinTools.ReqRsponseSuccess, error: @escaping CoinTools.ReqResponseFail)
  @objc public class func postRequestWith(url: Swift.String, params: [Swift.String : Any]?, success: @escaping CoinTools.ReqRsponseSuccess, error: @escaping CoinTools.ReqResponseFail)
  @objc deinit
}
extension CoinTools.HttpNetWork {
  @objc dynamic public class func netWorkReachability(reachabilityStatus: @escaping (CoinTools.HTNetworkStatus) -> Swift.Void)
}
public struct ShadowStyleRZ<T> where T : AnyObject {
  public var shadow: UIKit.NSShadow
  public init(_ target: T?)
  weak public var and: T?
  @discardableResult
  public func shadowOffset(_ offset: CoreGraphics.CGSize) -> CoinTools.ShadowStyleRZ<T>
  @discardableResult
  public func shadowBlurRadius(_ radius: CoreGraphics.CGFloat) -> CoinTools.ShadowStyleRZ<T>
  @discardableResult
  public func shadowColor(_ color: UIKit.UIColor?) -> CoinTools.ShadowStyleRZ<T>
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class RZFoldLabel : UIKit.UIView, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) open var attributedText: Foundation.NSAttributedString? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var numberOfLines: Swift.UInt
  @_Concurrency.MainActor(unsafe) open var preferredMaxLayoutWidth: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) open var condition: Foundation.NSAttributedString.RZCondition
  @_Concurrency.MainActor(unsafe) open var textInsetEdge: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isFold: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var showAllText: Foundation.NSAttributedString?
  @_Concurrency.MainActor(unsafe) open var foldText: Foundation.NSAttributedString?
  @_Concurrency.MainActor(unsafe) open var rzDidTapView: ((_ tap: Swift.String?, _ view: CoinTools.RZFoldLabel?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func canPaste(_ itemProviders: [Foundation.NSItemProvider]) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func textDrawRect() -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) open func resetAttributedText()
  @_Concurrency.MainActor(unsafe) open func setAttributedText()
  @_Concurrency.MainActor(unsafe) open func getDisplayFoldAttr() -> Foundation.NSAttributedString?
  @_Concurrency.MainActor(unsafe) open func getDisplayNormalFoldAttr() -> Foundation.NSAttributedString?
  @objc deinit
}
extension Foundation.NSAttributedString {
  public enum RZCondition : Swift.Int {
    case less
    case equal
    case more
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func rz_appendAttributedString(attr: Foundation.NSAttributedString?, condition: Foundation.NSAttributedString.RZCondition, line: Swift.UInt, inRect: CoreGraphics.CGRect) -> Foundation.NSAttributedString
  public func rz_linesIfDrawInRect(_ rect: CoreGraphics.CGRect) -> [CoinTools.RZAttributedStringInfo]?
}
extension Swift.Array {
  public static func fromCFArray(records: CoreFoundation.CFArray?) -> [Element]?
}
public struct RZAttributedStringInfo {
}
extension UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func addGestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer)
}
public enum ConferInsertPositionRZ : Swift.Int {
  case Default
  case Header
  case End
  case Cursor
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension CoinTools.RZColorfulSwiftBase where T : UIKit.UILabel {
  public func colorfulConfer(confer: CoinTools.ColorfulBlockRZ?)
  public func colorfulConferInsetTo(position: CoinTools.ConferInsertPositionRZ, _ append: CoinTools.ColorfulBlockRZ?)
  public func colorfulConferInsetToLocation(_ location: Swift.Int, _ confer: CoinTools.ColorfulBlockRZ?)
  public func getEndLocation() -> Swift.Int
}
extension UIKit.UILabel {
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.colorfulConfer(confer:ColorfulBlockRZ?) instead")
  @_Concurrency.MainActor(unsafe) public func rz_colorfulConfer(confer: CoinTools.ColorfulBlockRZ?)
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.colorfulConferInsetTo(position: ConferInsertPositionRZ, _ append:ColorfulBlockRZ?) instead")
  @_Concurrency.MainActor(unsafe) public func rz_colorfulConferInsetTo(position: CoinTools.ConferInsertPositionRZ, _ append: CoinTools.ColorfulBlockRZ?)
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.colorfulConferInsetToLocation(_ location:Int, _ confer:ColorfulBlockRZ?) instead")
  @_Concurrency.MainActor(unsafe) public func rz_colorfulConferInsetToLocation(_ location: Swift.Int, _ confer: CoinTools.ColorfulBlockRZ?)
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.getEndLocation() instead")
  @_Concurrency.MainActor(unsafe) public func getEndLocation() -> Swift.Int
}
extension CoinTools.RZColorfulSwiftBase where T : UIKit.UIButton {
  public func colorfulConfer(confer: CoinTools.ColorfulBlockRZ?, for state: UIKit.UIControl.State)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class GTCombinedChartView : UIKit.UIView {
  @discardableResult
  @objc @_Concurrency.MainActor(unsafe) open class func setBagIamgeView(bag: UIKit.UIView) -> UIKit.UIImageView
  @objc @_Concurrency.MainActor(unsafe) public static func setImage(imageV: UIKit.UIImageView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class GTLinkMessagesTableViewCell : UIKit.UITableViewCell {
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol AttributePackageRZ {
  func package(_ para: UIKit.NSMutableParagraphStyle?, _ sha: UIKit.NSShadow?) -> Foundation.NSAttributedString?
}
public class TextAttributeRZ {
  public enum WriteDirectionRZ {
    case LRE
    case LRO
    case RLE
    case RLO
    public static func == (a: CoinTools.TextAttributeRZ.WriteDirectionRZ, b: CoinTools.TextAttributeRZ.WriteDirectionRZ) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(_ text: Swift.String? = nil, attributedText: Foundation.NSAttributedString? = nil)
  @objc deinit
}
extension CoinTools.TextAttributeRZ : CoinTools.AttributePackageRZ {
  public func package(_ para: UIKit.NSMutableParagraphStyle?, _ sha: UIKit.NSShadow?) -> Foundation.NSAttributedString?
  public func package(_ attr: Foundation.NSMutableAttributedString?)
}
extension CoinTools.TextAttributeRZ {
  public var paragraphStyle: CoinTools.ParagraphStyleRZ<CoinTools.TextAttributeRZ>? {
    get
  }
  public var shadow: CoinTools.ShadowStyleRZ<CoinTools.TextAttributeRZ>? {
    get
  }
  @discardableResult
  public func font(_ font: UIKit.UIFont?) -> Self
  @discardableResult
  public func textColor(_ color: UIKit.UIColor?) -> Self
  @discardableResult
  public func backgroundColor(_ color: UIKit.UIColor?) -> Self
  @discardableResult
  public func ligature(_ ligature: Foundation.NSNumber?) -> Self
  @discardableResult
  public func kern(_ kern: Foundation.NSNumber?) -> Self
  @discardableResult
  public func strikethroughStyle(_ style: UIKit.NSUnderlineStyle?) -> Self
  @discardableResult
  public func strikethroughColor(_ color: UIKit.UIColor?) -> Self
  @discardableResult
  public func underlineStyle(_ style: UIKit.NSUnderlineStyle?) -> Self
  @discardableResult
  public func underlineColor(_ color: UIKit.UIColor?) -> Self
  @discardableResult
  public func strokeColor(_ color: UIKit.UIColor?) -> Self
  @discardableResult
  public func strokeWidth(_ width: Foundation.NSNumber?) -> Self
  @discardableResult
  public func link(_ link: Foundation.URL?) -> Self
  @discardableResult
  public func tapAction(_ action: Swift.String?) -> Self
  @discardableResult
  public func baselineOffset(_ offset: Foundation.NSNumber?) -> Self
  @discardableResult
  public func obliqueness(_ obliqueness: Foundation.NSNumber?) -> Self
  @discardableResult
  public func expansion(_ expansion: Foundation.NSNumber?) -> Self
  @discardableResult
  public func writingDirection(_ direction: CoinTools.TextAttributeRZ.WriteDirectionRZ) -> Self
  @discardableResult
  public func verticalGlyphForm(_ form: Foundation.NSNumber?) -> Self
  @discardableResult
  public func textEffect(_ effect: Foundation.NSAttributedString.TextEffectStyle) -> Self
}
extension CoinTools.TextAttributeRZ {
  @discardableResult
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .strikethroughStyle(_ style: NSUnderlineStyle?) instead")
  public func strikethroughStyle(_ style: Foundation.NSNumber?) -> Self
  @discardableResult
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .underlineStyle(_ style: NSUnderlineStyle?) instead")
  public func underlineStyle(_ underlineStyle: Foundation.NSNumber?) -> Self
  @discardableResult
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .writingDirection(_ direction:TextAttributeRZ.WriteDirectionRZ) instead")
  public func writingDirection(_ writingDirection: [Foundation.NSNumber]?) -> Self
}
extension CoinTools.RZColorfulSwiftBase where T : Foundation.NSAttributedString {
  public static func htmlString(_ html: Swift.String?) -> Foundation.NSAttributedString?
  public func codingToHtmlWithImagesURLSIfHad(urls: [Swift.String]?) -> Swift.String?
  public func codingToCompleteHtml() -> Swift.String?
  public func codingToCompleteHtmlByWeb() -> Swift.String?
  public func codingToHtmlByWebWithImagesURLSIfHad(urls: [Swift.String]?) -> Swift.String?
}
extension Foundation.NSAttributedString {
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.htmlString(html) instead")
  public static func htmlString(_ html: Swift.String?) -> Foundation.NSAttributedString?
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.codingToHtmlWithImagesURLSIfHad(urls: urls) instead")
  public func rz_codingToHtmlWithImagesURLSIfHad(urls: [Swift.String]?) -> Swift.String?
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.codingToCompleteHtml() instead")
  public func rz_codingToCompleteHtml() -> Swift.String?
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.codingToCompleteHtmlByWeb() instead")
  public func rz_codingToCompleteHtmlByWeb() -> Swift.String?
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.rz_codingToHtmlByWebWithImagesURLSIfHad(urls: urls) instead")
  public func rz_codingToHtmlByWebWithImagesURLSIfHad(urls: [Swift.String]?) -> Swift.String?
}
@_hasMissingDesignatedInitializers public class ArrayHelperRZ {
  @objc deinit
}
public typealias ChartlineBlcok = (Swift.Bool) -> ()
public typealias ScreenBlcok = () -> ()
public typealias TempPublicSelectModels = (_ publicSelectModel1s: Swift.Array<CoinTools.GatePublicSelectModel>, _ publicSelectModel1s: Swift.Array<CoinTools.GatePublicSelectModel>) -> ()
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class GTPublicChartCell : UIKit.UITableViewCell, Charts.ChartViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var isChartline: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var temps: [Any]
  @objc @_Concurrency.MainActor(unsafe) public var allstyleArr: [Any]
  @objc @_Concurrency.MainActor(unsafe) public var dtempSets: [Any]
  @objc @_Concurrency.MainActor(unsafe) public var marker: CoinTools.GTChartPMarkerView?
  @objc @_Concurrency.MainActor(unsafe) public var Chartline: CoinTools.ChartlineBlcok?
  @objc @_Concurrency.MainActor(unsafe) public var selectBlock: CoinTools.ScreenBlcok?
  @objc @_Concurrency.MainActor(unsafe) public var tempPublicSelectModels: CoinTools.TempPublicSelectModels?
  @objc @_Concurrency.MainActor(unsafe) public var currentDatas: [CoinTools.GTAlldatalistModel]
  @objc @_Concurrency.MainActor(unsafe) public var publicContentModel: CoinTools.GTPublicContentModel? {
    @objc get
    @objc set
  }
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func generateBarData() -> Charts.BarChartData
  @_Concurrency.MainActor(unsafe) @objc public func chartValueSelected(_ chartView: Charts.ChartViewBase, entry: Charts.ChartDataEntry, highlight: Charts.Highlight)
  @_Concurrency.MainActor(unsafe) @objc public func chartScaled(_ chartView: Charts.ChartViewBase, scaleX: CoreGraphics.CGFloat, scaleY: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc public func chartTranslated(_ chartView: Charts.ChartViewBase, dX: CoreGraphics.CGFloat, dY: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc public func chartViewDidEndPanning(_ chartView: Charts.ChartViewBase)
  @_Concurrency.MainActor(unsafe) @objc public func chartView(_ chartView: Charts.ChartViewBase, animatorDidStop animator: Charts.Animator)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class GTSDKWebSocket : ObjectiveC.NSObject, Starscream.WebSocketDelegate {
  @objc override dynamic public init()
  @objc public func r()
  public func didReceive(event: Starscream.WebSocketEvent, client: Starscream.WebSocket)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class GTChartDefaultValueFormatter : Charts.DefaultValueFormatter {
  @objc open var index: Swift.Int
  @objc override open func stringForValue(_ value: Swift.Double, entry: Charts.ChartDataEntry, dataSetIndex: Swift.Int, viewPortHandler: Charts.ViewPortHandler?) -> Swift.String
  @objc override dynamic public init()
  @objc override public init(formatter: Foundation.NumberFormatter)
  @objc override public init(decimals: Swift.Int)
  @objc override public init(block: @escaping Charts.DefaultValueFormatter.Block)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class LFMarketTrendFormatter : Charts.DefaultValueFormatter {
  @objc open var index: Swift.Int
  @objc override open func stringForValue(_ value: Swift.Double, entry: Charts.ChartDataEntry, dataSetIndex: Swift.Int, viewPortHandler: Charts.ViewPortHandler?) -> Swift.String
  @objc override dynamic public init()
  @objc override public init(formatter: Foundation.NumberFormatter)
  @objc override public init(decimals: Swift.Int)
  @objc override public init(block: @escaping Charts.DefaultValueFormatter.Block)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class YCChartMarkerView : Charts.MarkerView {
  @objc @_Concurrency.MainActor(unsafe) public var isIndividualNightMode: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var markerType: CoinTools.YCChartMarkerType
  @objc @_Concurrency.MainActor(unsafe) public var data: Any? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override public func draw(context: CoreGraphics.CGContext, point: CoreGraphics.CGPoint)
  @_Concurrency.MainActor(unsafe) @objc override public func refreshContent(entry: Charts.ChartDataEntry, highlight: Charts.Highlight)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class ParagraphStyleRZ<T> where T : AnyObject {
  public var paragraph: UIKit.NSMutableParagraphStyle
  public init(_ target: T?)
  weak public var and: T?
  @discardableResult
  public func lineSpacing(_ space: CoreGraphics.CGFloat) -> Self
  @discardableResult
  public func paragraphSpacingBefore(_ space: CoreGraphics.CGFloat) -> Self
  @discardableResult
  public func paragraphSpacing(_ space: CoreGraphics.CGFloat) -> Self
  @discardableResult
  public func alignment(_ alignment: UIKit.NSTextAlignment) -> Self
  @discardableResult
  public func firstLineHeadIndent(_ indent: CoreGraphics.CGFloat) -> Self
  @discardableResult
  public func headIndent(_ indent: CoreGraphics.CGFloat) -> Self
  @discardableResult
  public func tailIndent(_ indent: CoreGraphics.CGFloat) -> Self
  @discardableResult
  public func lineBreakMode(_ mode: UIKit.NSLineBreakMode) -> Self
  @discardableResult
  public func minimumLineHeight(_ height: CoreGraphics.CGFloat) -> Self
  @discardableResult
  public func maximumLineHeight(_ height: CoreGraphics.CGFloat) -> Self
  @discardableResult
  public func baseWritingDirection(_ direction: UIKit.NSWritingDirection) -> Self
  @discardableResult
  public func lineHeightMultiple(_ multiple: CoreGraphics.CGFloat) -> Self
  @discardableResult
  public func hyphenationFactor(_ factor: Swift.Float) -> Self
  @discardableResult
  public func defaultTabInterval(_ interval: CoreGraphics.CGFloat) -> Self
  @discardableResult
  public func allowsDefaultTighteningForTruncation(_ allow: Swift.Bool) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ColorfulConferrerRZ {
  public func confer() -> Foundation.NSAttributedString?
  @objc deinit
}
extension CoinTools.ColorfulConferrerRZ {
  @discardableResult
  public func text(_ text: Swift.String?) -> CoinTools.TextAttributeRZ?
  @discardableResult
  public func htmlString(_ htmlString: Swift.String?) -> CoinTools.TextAttributeRZ?
  @discardableResult
  public func image(_ image: UIKit.UIImage?) -> CoinTools.ImageAttributeRZ?
  @discardableResult
  public func imageByUrl(_ imageUrl: Swift.String?) -> CoinTools.ImageAttributeRZ?
  public var paragraphStyle: CoinTools.ParagraphStyleRZ<CoinTools.ColorfulConferrerRZ>? {
    get
  }
  public var shadow: CoinTools.ShadowStyleRZ<CoinTools.ColorfulConferrerRZ>? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class GTFoundationChangeCell : CoinTools.GTPublicChartCell {
  @objc @_Concurrency.MainActor(unsafe) public var is24H: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var xXisFearIndexValueFormatter: CoinTools.GTXAxisFearIndexValueFormatter?
  @objc @_Concurrency.MainActor(unsafe) public var yLeftXisFearIndexValueFormatter: CoinTools.GTYxisFearIndexValueFormatter?
  @objc @_Concurrency.MainActor(unsafe) public var yXisFearIndexValueFormatter: CoinTools.GTYxisFearIndexValueFormatter?
  @objc @_Concurrency.MainActor(unsafe) public var index: Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override public var publicContentModel: CoinTools.GTPublicContentModel? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class GTV2ChartPMarkerView : Charts.MarkerView {
  @objc(GTV2ChartPMarkerViewCalendarPermission) public enum AleartType : Swift.Int {
    case duoKong = 10
    case baoCang
    case kongHuang
    case chiCang
    case daDan
    case bigOrder
    case updOwnData
    case newBaoCang
    case Pair
    case fearIndex
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @_Concurrency.MainActor(unsafe) open var cycleSelectBlock: (_ index: ObjectiveC.NSInteger) -> Swift.Array<Any>
  @objc @_Concurrency.MainActor(unsafe) open var is24H: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var isHiddenTime: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var isMianNeight: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var Xmodel: CoinTools.GatePublicSelectModel?
  @objc @_Concurrency.MainActor(unsafe) open var xAxisValueFormatter: Charts.IAxisValueFormatter?
  @objc @_Concurrency.MainActor(unsafe) open var models: [CoinTools.GatePublicSelectModel]
  @objc @_Concurrency.MainActor(unsafe) open var stylemodels: [[Swift.String : Any]]
  @objc @_Concurrency.MainActor(unsafe) open var possArr: [Any]
  @objc @_Concurrency.MainActor(unsafe) open var lineChartView: Charts.LineChartView?
  @objc @_Concurrency.MainActor(unsafe) open var chartsView: Charts.CombinedChartView?
  @objc @_Concurrency.MainActor(unsafe) open var selectModels: [CoinTools.GatePublicSelectModel]
  @objc @_Concurrency.MainActor(unsafe) open var aleartType: CoinTools.GTV2ChartPMarkerView.AleartType
  @IBOutlet @objc @_Concurrency.MainActor(unsafe) weak open var publicView: CoinTools.GTChartPMarkerPublicView!
  @objc override dynamic open func awakeFromNib()
  @objc @_Concurrency.MainActor(unsafe) public static func loadFromNib(_ nibname: Swift.String? = nil) -> Self
  @_Concurrency.MainActor(unsafe) @objc override open func draw(context: CoreGraphics.CGContext, point: CoreGraphics.CGPoint)
  @_Concurrency.MainActor(unsafe) @objc override open func refreshContent(entry: Charts.ChartDataEntry, highlight: Charts.Highlight)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias FileActionBlock = () -> ()
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class GTSearchBt : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var searchBlock: CoinTools.FileActionBlock?
  @objc @_Concurrency.MainActor(unsafe) public var closeBlock: CoinTools.FileActionBlock?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CoinTools.RZColorfulSwiftBase where T : Foundation.NSAttributedString {
  public static func colorfulConfer(confer: (_ confer: CoinTools.ColorfulConferrerRZ) -> Swift.Void) -> Foundation.NSAttributedString?
  public func attributedStringByAppend(attributedString: Foundation.NSAttributedString) -> Foundation.NSAttributedString
  public func colorfulAttr(attr: (_ attr: CoinTools.TextAttributeRZ) -> Swift.Void) -> Foundation.NSAttributedString?
  public func images() -> [UIKit.UIImage]
  public func sizeWithConditionWidth(width: Swift.Float) -> CoreGraphics.CGSize
  public func sizeWithConditionHeight(height: Swift.Float) -> CoreGraphics.CGSize
  public func sizeWithCondition(size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
}
extension Foundation.NSAttributedString {
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.colorfulConfer(confer: ColorfulBlockRZ) instead")
  public static func rz_colorfulConfer(confer: (_ confer: CoinTools.ColorfulConferrerRZ) -> Swift.Void) -> Foundation.NSAttributedString?
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.attributedStringByAppend(attributedString: NSAttributedString) instead")
  public func attributedStringByAppend(attributedString: Foundation.NSAttributedString) -> Foundation.NSAttributedString
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.colorfulAttr(attr: ColorfulAttrBlockRZ) instead")
  public func rz_colorfulAttr(attr: (_ attr: CoinTools.TextAttributeRZ) -> Swift.Void) -> Foundation.NSAttributedString?
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.images() instead")
  public func rz_images() -> [UIKit.UIImage]
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.sizeWithConditionWidth(width: width) instead")
  public func sizeWithConditionWidth(width: Swift.Float) -> CoreGraphics.CGSize
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.sizeWithConditionHeight(height: height) instead")
  public func sizeWithConditionHeight(height: Swift.Float) -> CoreGraphics.CGSize
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.sizeWithCondition(size: size) instead")
  public func sizeWithCondition(size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
}
extension CoinTools.RZColorfulSwiftBase where T : Foundation.NSMutableAttributedString {
  public func colorfulAttrAppend(attr: (_ attr: CoinTools.TextAttributeRZ) -> Swift.Void)
}
extension Foundation.NSMutableAttributedString {
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.colorfulAttrAppend(attr: ColorfulAttrBlockRZ) instead")
  public func rz_colorfulAttrAppend(attr: (_ attr: CoinTools.TextAttributeRZ) -> Swift.Void)
}
extension CoinTools.RZColorfulSwiftBase where T : UIKit.UITextField {
  public func colorfulConfer(confer: CoinTools.ColorfulBlockRZ?)
  public func colorfulConferInsetTo(position: CoinTools.ConferInsertPositionRZ, _ append: CoinTools.ColorfulBlockRZ?)
  public func colorfulConferInsetToLocation(_ location: Swift.Int, _ confer: CoinTools.ColorfulBlockRZ?)
  public func getEndLocation() -> Swift.Int
  public func getCursorLocation() -> Swift.Int
  public func selectedRange() -> Foundation.NSRange
  public func setSelectedRange(range: Foundation.NSRange)
}
extension UIKit.UITextField {
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.colorfulConfer(confer: confer) instead")
  @_Concurrency.MainActor(unsafe) public func rz_colorfulConfer(confer: CoinTools.ColorfulBlockRZ?)
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.colorfulConferInsetTo(position: position, append) instead")
  @_Concurrency.MainActor(unsafe) public func rz_colorfulConferInsetTo(position: CoinTools.ConferInsertPositionRZ, _ append: CoinTools.ColorfulBlockRZ?)
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.colorfulConferInsetToLocation(location, confer) instead")
  @_Concurrency.MainActor(unsafe) public func rz_colorfulConferInsetToLocation(_ location: Swift.Int, _ confer: CoinTools.ColorfulBlockRZ?)
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.getEndLocation() instead")
  @_Concurrency.MainActor(unsafe) public func getEndLocation() -> Swift.Int
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.getCursorLocation() instead")
  @_Concurrency.MainActor(unsafe) public func getCursorLocation() -> Swift.Int
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.selectedRange() instead")
  @_Concurrency.MainActor(unsafe) public func rz_selectedRange() -> Foundation.NSRange
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.setSelectedRange(range: range) instead")
  @_Concurrency.MainActor(unsafe) public func rz_setSelectedRange(range: Foundation.NSRange)
}
@_inheritsConvenienceInitializers @objc open class GTLoadImageManager : ObjectiveC.NSObject {
  @objc public class func setImage(imageeView: UIKit.UIImageView, url: Swift.String, placeholder_image: UIKit.UIImage)
  @objc public class func addTomaskView()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class GTCoinMessageCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) open var coinUrl: Foundation.NSString
  @objc @_Concurrency.MainActor(unsafe) open var backBlock: ((Swift.Bool) -> ())?
  @objc @_Concurrency.MainActor(unsafe) open var isIndividualNightMode: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var isFold: Swift.Bool
  @IBOutlet @objc @_Concurrency.MainActor(unsafe) weak open var coinIcon: UIKit.UIImageView!
  @objc @_Concurrency.MainActor(unsafe) open var tex1tLabel: CoinTools.RZFoldLabel
  @objc @_Concurrency.MainActor(unsafe) open var dattaModel: CoinTools.GTPublicContentModel {
    @objc get
    @objc set
  }
  @objc override dynamic open func awakeFromNib()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum MySwiftThemes : Swift.Int {
  case light = 0
  case night = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class GTSDK_SnapKit : ObjectiveC.NSObject {
  @objc public class func gtSDK_makeConstraints(view: UIKit.UIView, relativeView: UIKit.UIView?, top: CoreGraphics.CGFloat = -99, left: CoreGraphics.CGFloat = -99, bottom: CoreGraphics.CGFloat = -99, right: CoreGraphics.CGFloat = -99, height: CoreGraphics.CGFloat = -99, weight: CoreGraphics.CGFloat = -99, centerX: CoreGraphics.CGFloat = -99, centerY: CoreGraphics.CGFloat = -99, relativeFloat: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeRemoveConstraint(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraintsUpdataWeight(view: UIKit.UIView, weight: CoreGraphics.CGFloat)
  @objc public class func gtSDK_UpdataWeight(view: UIKit.UIView, weight: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraintsUpdataBottom(view: UIKit.UIView, bottom: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraintsUpdataLeft(view: UIKit.UIView, left: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraintsUpdataLeft1(view: UIKit.UIView, left: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraintsUpdataRight(view: UIKit.UIView, right: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraintsUpdataHeight(view: UIKit.UIView, Height: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraintsUpdataTop(view: UIKit.UIView, top: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraintsUpdataCenterX(view: UIKit.UIView, centerX: CoreGraphics.CGFloat)
  @objc public class func gtsdk_makeConstraintsUpdata_view_Left(view: UIKit.UIView, view1: UIKit.UIView, left: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraints1(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints2(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints3(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints4(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints5(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints6(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints7(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints8(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints9(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints10(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints11(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints12(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints13(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints14(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints15(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints16(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints17(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints18(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints19(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints20(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints21(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints22(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints23(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints24(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints25(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints26(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints27(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints28(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints29(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints30(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints31(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints32(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints33(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints34(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints35(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints36(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints37(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints38(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints39(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints40(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints41(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints42(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint43(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints44(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints45(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints46(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints47(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints48(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints48(view: UIKit.UIView, superView: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints49(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints50(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints51(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints52(view: UIKit.UIView, superView: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints53(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints54(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints55(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints56(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints57(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints58(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints59(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints60(view: UIKit.UIView, view1: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints61(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints62(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints63(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints64(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints66(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints67(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints68(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints69(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints70(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints71(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints72(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints73(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints74(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints75(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints76(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints77(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints78(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints79(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints80(view: UIKit.UIView, progressLeftSpace: CoreGraphics.CGFloat, progressHeight: CoreGraphics.CGFloat, minButton: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints81(view: UIKit.UIView, view1: UIKit.UIView, minButton: UIKit.UIView, maxButton: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints82(view: UIKit.UIView, view1: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints83(view: UIKit.UIView, view1: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints84(view: UIKit.UIView, _minButton: UIKit.UIView, indicateViewWidth: CoreGraphics.CGFloat, indicateViewOffset: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraintsUpdatacenterX(view: UIKit.UIView, _progressView: UIKit.UIView, y: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraintsUpdatabottom(view: UIKit.UIView, _maxButton: UIKit.UIView, y: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraintsUpdataW(view: UIKit.UIView, _indicateViewWidth: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraints86(view: UIKit.UIView, progressLeftSpace: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraints87(view: UIKit.UIView, _progressView: UIKit.UIView, x: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraints88(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints89(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints90(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints91(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints92(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints93(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint94(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint95(view: UIKit.UIView, height: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraints96(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints97(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints98(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints99(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints100(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints101(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints102(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint103(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint104(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint105(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint106(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint107(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint108(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint109(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint110(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint111(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint112(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint113(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint114(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint115(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint116(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint118(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints119(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint120(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint122(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint123(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint124(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint125(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint126(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint127(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint128(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint129(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint130(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint131(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint132(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints133(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints134(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints135(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints136(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint137(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint138(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints139(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint140(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints141(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint142(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint143(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint144(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint145(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint146(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_updateConstraint146(view: UIKit.UIView, view2: UIKit.UIView, offSet: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraint147(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint148(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint149(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint150(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint151(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint152(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint153(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint154(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint155(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint156(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint157(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints158(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints159(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints160(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints161(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints162(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints163(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints164(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints165(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints166(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints167(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints168(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints169(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints170(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints171(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints172(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func v3_gtSDK_makeEqualSuperConstraint1(view: UIKit.UIView)
  @objc public class func v3_gtSDK_makeConstraint1(view: UIKit.UIView)
  @objc public class func v3_gtSDK_makeConstraint2(view: UIKit.UIView, bottomMargin: CoreGraphics.CGFloat)
  @objc public class func v3_gtSDK_makeYCenterLeftMaringConstraint(view: UIKit.UIView, leftMargin: CoreGraphics.CGFloat)
  @objc public class func v3_gtSDK_makeYCenterRightMaringConstraint(view: UIKit.UIView, rightMargin: CoreGraphics.CGFloat)
  @objc public class func v3_gtSDK_makeYCenterRightMaringSizeConstraint(view: UIKit.UIView, rightMargin: CoreGraphics.CGFloat, size: CoreGraphics.CGSize)
  @objc public class func v3_gtSDK_makeX_YCenterConstraint(view: UIKit.UIView)
  @objc public class func v3_gtSDK_makeX_YWithSizeCenterConstraint(view: UIKit.UIView, size: CoreGraphics.CGSize)
  @objc public class func v3_gtSDK_makeConstraint3(view: UIKit.UIView, topMargin: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraints173(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints174(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints175(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints176(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints177(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints178(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints179(view: UIKit.UIView, view2: UIKit.UIView, view3: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints180(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints181(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints182(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints183(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints184(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints185(view: UIKit.UIView)
  @objc public class func gtSDK_updateHeight(view: UIKit.UIView, height: CoreGraphics.CGFloat)
  @objc public class func gtSDK_makeConstraint186(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint187(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints188(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraints189(view: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint193(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint190(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint191(view: UIKit.UIView, view2: UIKit.UIView)
  @objc public class func gtSDK_makeConstraint192(view: UIKit.UIView)
  @objc override dynamic public init()
  @objc deinit
}
public class HtmlTransformRZ {
  public typealias RZStyleConfigure = ((_ obj: Any, _ attr: Foundation.NSDictionary) -> Swift.String)
  public var styleConfigure: CoinTools.HtmlTransformRZ.RZStyleConfigure?
  public var key: Foundation.NSAttributedString.Key?
  public var keys: [Foundation.NSAttributedString.Key]
  public var url: Swift.String?
  public var style: Swift.String?
  public init(key: Foundation.NSAttributedString.Key? = nil, styleConfigure: CoinTools.HtmlTransformRZ.RZStyleConfigure? = nil)
  public init(keys: [Foundation.NSAttributedString.Key]?, styleConfigure: CoinTools.HtmlTransformRZ.RZStyleConfigure?)
  public var webLabels: [CoinTools.HtmlTransformRZ] {
    get
    set
  }
  @objc deinit
}
extension CoinTools.HtmlTransformRZ {
  public static let share: CoinTools.HtmlTransformRZ
  public func mergeUrlAndStyle() -> Swift.String?
  public func creatHtmlLabelWith(html: Swift.String?) -> Swift.String?
  public static func italicTrans(_ value: Swift.Float) -> Swift.Float
  public static func expansionTrans(_ value: Swift.Float) -> Swift.Float
  public static func directionTrans(_ value: Swift.Int) -> CoinTools.TextAttributeRZ.WriteDirectionRZ
}
extension CoinTools.RZColorfulSwiftBase where T : UIKit.UIColor {
  public func hexString() -> Swift.String
}
extension Swift.Int {
  public func rz_16() -> Swift.String
}
@objc public enum YCLayoutAttribute : ObjectiveC.NSInteger {
  case Left = 1
  case Right = 2
  case Top = 3
  case Bottom = 4
  case Width = 5
  case Height = 6
  case CenterX = 7
  case CenterY = 8
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_removeConstraints()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeLeftEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeLeftEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeLeftEqualTo(view: UIKit.UIView, isSafeArea: Swift.Bool, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeLeftGreaterThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeLeftGreaterThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeLeftGreaterThanOrEqualTo(view: UIKit.UIView, isSafeArea: Swift.Bool, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeLeftLessThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeLeftLessThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeLeftLessThanOrEqualTo(view: UIKit.UIView, isSafeArea: Swift.Bool, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeRightEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeRightEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeRightEqualTo(view: UIKit.UIView, isSafeArea: Swift.Bool, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeRightGreaterThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeRightGreaterThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeRightGreaterThanOrEqualTo(view: UIKit.UIView, isSafeArea: Swift.Bool, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeRightLessThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeRightLessThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeRightLessThanOrEqualTo(view: UIKit.UIView, isSafeArea: Swift.Bool, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeTopEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeTopEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeTopGreaterThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeTopGreaterThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeTopLessThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeTopLessThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeBottomEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeBottomEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeBottomGreaterThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeBottomGreaterThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeBottomLessThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeBottomLessThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeWidthEqualTo(width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeWidthEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeWidthEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat, dividedBy: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeWidthGreaterThanOrEqualTo(width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeWidthGreaterThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeWidthGreaterThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat, dividedBy: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeWidthLessThanOrEqualTo(width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeWidthLessThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeWidthLessThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat, dividedBy: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeHeightEqualTo(height: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeHeightEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeHeightEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat, dividedBy: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeHeightGreaterThanOrEqualTo(height: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeHeightGreaterThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeHeightGreaterThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat, dividedBy: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeHeightLessThanOrEqualTo(height: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeHeightLessThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeHeightLessThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat, dividedBy: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeSizeEqualTo(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeEdgesEqualTo(view: UIKit.UIView, left: CoreGraphics.CGFloat, right: CoreGraphics.CGFloat, top: CoreGraphics.CGFloat, bottom: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeCenterXEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeCenterYEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_makeCenterEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateLeftEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateLeftEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateLeftEqualTo(view: UIKit.UIView, isSafeArea: Swift.Bool, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateLeftGreaterThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateLeftGreaterThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateLeftGreaterThanOrEqualTo(view: UIKit.UIView, isSafeArea: Swift.Bool, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateLeftLessThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateLeftLessThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateLeftLessThanOrEqualTo(view: UIKit.UIView, isSafeArea: Swift.Bool, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateRightEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateRightEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateRightEqualTo(view: UIKit.UIView, isSafeArea: Swift.Bool, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateRightGreaterThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateRightGreaterThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateRightGreaterThanOrEqualTo(view: UIKit.UIView, isSafeArea: Swift.Bool, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateRightLessThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateRightLessThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateRightLessThanOrEqualTo(view: UIKit.UIView, isSafeArea: Swift.Bool, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateTopEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateTopEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateTopGreaterThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateTopGreaterThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateTopLessThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateTopLessThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateBottomEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateBottomEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateBottomGreaterThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateBottomGreaterThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateBottomLessThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateBottomLessThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateWidthEqualTo(width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateWidthEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateWidthEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat, dividedBy: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateWidthGreaterThanOrEqualTo(width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateWidthGreaterThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateWidthGreaterThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat, dividedBy: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateWidthLessThanOrEqualTo(width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateWidthLessThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateWidthLessThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat, dividedBy: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateHeightEqualTo(height: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateHeightEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateHeightEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat, dividedBy: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateHeightGreaterThanOrEqualTo(height: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateHeightGreaterThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateHeightGreaterThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat, dividedBy: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateHeightLessThanOrEqualTo(height: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateHeightLessThanOrEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateHeightLessThanOrEqualTo(view: UIKit.UIView, attribute: CoinTools.YCLayoutAttribute, offset: CoreGraphics.CGFloat, dividedBy: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateSizeEqualTo(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateEdgesEqualTo(view: UIKit.UIView, left: CoreGraphics.CGFloat, right: CoreGraphics.CGFloat, top: CoreGraphics.CGFloat, bottom: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateCenterXEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateCenterYEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func yc_updateCenterEqualTo(view: UIKit.UIView, offset: CoreGraphics.CGFloat)
}
@_inheritsConvenienceInitializers @objc open class GTSDKNetworkReachabilityManager : ObjectiveC.NSObject {
  @objc public class func isNetworkConnect() -> (Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
extension CoinTools.RZColorfulSwiftBase where T : UIKit.UITextView {
  public func colorfulConfer(confer: CoinTools.ColorfulBlockRZ?)
  public func colorfulConferInsetTo(position: CoinTools.ConferInsertPositionRZ, _ append: CoinTools.ColorfulBlockRZ?)
  public func colorfulConferInsetToLocation(_ location: Swift.Int, _ confer: CoinTools.ColorfulBlockRZ?)
  public func getEndLocation() -> Swift.Int
  public func getCursorLocation() -> Swift.Int
  public func didTapTextView(rzdidTapTextView: @escaping CoinTools.RZDidTapTextView)
}
extension UIKit.UITextView {
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.colorfulConfer(confer: confer) instead")
  @_Concurrency.MainActor(unsafe) public func rz_colorfulConfer(confer: CoinTools.ColorfulBlockRZ?)
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.colorfulConferInsetTo(position: position, append) instead")
  @_Concurrency.MainActor(unsafe) public func rz_colorfulConferInsetTo(position: CoinTools.ConferInsertPositionRZ, _ append: CoinTools.ColorfulBlockRZ?)
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.colorfulConferInsetToLocation(location, confer) instead")
  @_Concurrency.MainActor(unsafe) public func rz_colorfulConferInsetToLocation(_ location: Swift.Int, _ confer: CoinTools.ColorfulBlockRZ?)
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.getEndLocation() instead")
  @_Concurrency.MainActor(unsafe) public func getEndLocation() -> Swift.Int
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.getCursorLocation() instead")
  @_Concurrency.MainActor(unsafe) public func getCursorLocation() -> Swift.Int
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .rz.didTapTextView(rzdidTapTextView: rzdidTapTextView) instead")
  @_Concurrency.MainActor(unsafe) public func rzDidTapTextView(rzdidTapTextView: @escaping CoinTools.RZDidTapTextView)
}
public enum ImageAttachmentHorizontalAlignRZ {
  case bottom
  case center
  case top
  public static func == (a: CoinTools.ImageAttachmentHorizontalAlignRZ, b: CoinTools.ImageAttachmentHorizontalAlignRZ) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class ImageAttributeRZ {
  public init(_ image: UIKit.UIImage? = nil)
  @objc deinit
}
extension CoinTools.ImageAttributeRZ : CoinTools.AttributePackageRZ {
  public func package(_ para: UIKit.NSMutableParagraphStyle?, _ sha: UIKit.NSShadow?) -> Foundation.NSAttributedString?
}
extension CoinTools.ImageAttributeRZ {
  public var paragraphStyle: CoinTools.ParagraphStyleRZ<CoinTools.ImageAttributeRZ>? {
    get
  }
  public var shadow: CoinTools.ShadowStyleRZ<CoinTools.ImageAttributeRZ>? {
    get
  }
  @discardableResult
  @available(iOS, introduced: 7.0, deprecated: 7.0, message: "Use .paragraphStyle?.alignment instead")
  public func alignment(_ alignment: UIKit.NSTextAlignment) -> Self
  @discardableResult
  public func bounds(_ bounds: CoreGraphics.CGRect) -> Self
  @discardableResult
  public func maxSize(_ size: CoreGraphics.CGSize, align: CoinTools.ImageAttachmentHorizontalAlignRZ = .bottom, font: UIKit.UIFont = .systemFont(ofSize: 0)) -> Self
  @discardableResult
  public func size(_ size: CoreGraphics.CGSize, align: CoinTools.ImageAttachmentHorizontalAlignRZ = .bottom, font: UIKit.UIFont = .systemFont(ofSize: 0)) -> Self
  @discardableResult
  public func yOffset(_ yOffset: CoreGraphics.CGFloat?) -> Self
  @discardableResult
  public func url(_ url: Foundation.URL?) -> Self
  @discardableResult
  public func tapAction(_ action: Swift.String?) -> Self
}
@_inheritsConvenienceInitializers @objc public class CoinTool : ObjectiveC.NSObject {
  @objc public class func gtsdk_getNc() -> UIKit.UINavigationController
  @objc public class func gtsdk_getNavHomePageControllerWhit(config: CoinTools.GTSDKConfig) -> CoinTools.GateHomePageController
  @objc public class func gtsdk_getConfig() -> CoinTools.GTSDKConfig
  @objc public class func gtsdk_getSDK_Main_BigOrderVcWhit() -> CoinTools.GTSDK_Main_BigOrderStatisticsViewController
  @objc public class func gtsdk_getSDK_Main_NewHoldCoinVcWhit() -> CoinTools.GTSDK_Main_NewHoldCoinViewController
  @objc public class func gtsdk_getSDK_Main_BigFiguretranVcWhit() -> CoinTools.GTSDK_Main_BigFiguretranViewController
  @objc public class func gtsdk_getSDK_Main_AnalyseDataVcWhit() -> CoinTools.GTSDK_Main_AnalyseDataViewController
  @objc public class func gtsdk_getSDK_Main_CoinMessageVcWhit() -> CoinTools.GTSDK_Main_NewCoinMessageViewController
  @objc public class func gtsdk_configuration(config: CoinTools.GTSDKConfig)
  @objc override dynamic public init()
  @objc deinit
}
public struct RZColorfulSwiftBase<T> {
  public let rz: T
  public init(rz: T)
}
public protocol RZColorfulSwiftProtocol {
  associatedtype T
  static var rz: CoinTools.RZColorfulSwiftBase<Self.T>.Type { get set }
  var rz: CoinTools.RZColorfulSwiftBase<Self.T> { get set }
}
extension CoinTools.RZColorfulSwiftProtocol {
  public static var rz: CoinTools.RZColorfulSwiftBase<Self>.Type {
    get
    set
  }
  public var rz: CoinTools.RZColorfulSwiftBase<Self> {
    get
    set
  }
}
extension UIKit.UIView : CoinTools.RZColorfulSwiftProtocol {
  public typealias T = UIKit.UIView
}
extension Foundation.NSAttributedString : CoinTools.RZColorfulSwiftProtocol {
  public typealias T = Foundation.NSAttributedString
}
extension UIKit.UIColor : CoinTools.RZColorfulSwiftProtocol {
  public typealias T = UIKit.UIColor
}
public typealias RZDidTapTextView = (_ tapObj: Swift.String, _ textView: UIKit.UITextView) -> Swift.Bool
public typealias ColorfulBlockRZ = ((_ confer: CoinTools.ColorfulConferrerRZ) -> Swift.Void)
public typealias ColorfulAttrBlockRZ = ((_ attr: CoinTools.TextAttributeRZ) -> Swift.Void)
@objc @_Concurrency.MainActor(unsafe) open class TBChartMarker : Charts.MarkerView {
  @_Concurrency.MainActor(unsafe) open var color: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) open var arrowSize: CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) open var font: UIKit.UIFont?
  @_Concurrency.MainActor(unsafe) open var insets: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) open var minimumSize: CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) open var xAxisLabels: [Swift.String]!
  @_Concurrency.MainActor(unsafe) open var valuesCount: Swift.Int!
  @_Concurrency.MainActor(unsafe) public init(color: UIKit.UIColor, font: UIKit.UIFont, insets: UIKit.UIEdgeInsets)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override open func draw(context: CoreGraphics.CGContext, point: CoreGraphics.CGPoint)
  @objc deinit
}
extension Swift.Collection {
  public subscript(safe index: Self.Index) -> Self.Element? {
    get
  }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class GTClassifyViewController : UIKit.UIViewController, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @objc @_Concurrency.MainActor(unsafe) open var firstTitle: Swift.String
  @objc @_Concurrency.MainActor(unsafe) open var secondTitle: Swift.String
  @objc @_Concurrency.MainActor(unsafe) open var centerTitle: Swift.String
  @objc @_Concurrency.MainActor(unsafe) open var skipBlock: ((_ index: Swift.Int, _ url: Swift.String, _ title: Swift.String) -> ())?
  @objc @_Concurrency.MainActor(unsafe) open var hidenBlock: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) open var showBlock: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) open var titleModels: Foundation.NSMutableArray
  @objc @_Concurrency.MainActor(unsafe) open var subTitleModels: Foundation.NSMutableArray
  @objc @_Concurrency.MainActor(unsafe) open var bigTitleM: CoinTools.GTPublicContentModel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var homepage_navigation: CoinTools.GTHomepage_navigationModel?
  @objc @_Concurrency.MainActor(unsafe) open var homesub_navigation: CoinTools.GTHomepage_navigationModel?
  @objc @_Concurrency.MainActor(unsafe) open var shareConfig: CoinTools.GTSDKConfig?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class TapActionHelperRZ : ObjectiveC.NSObject, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) public init(_ target: UIKit.UITextView?)
  @_Concurrency.MainActor(unsafe) @objc public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS, introduced: 7.0, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
  @available(iOS, introduced: 7.0, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class GTChartPMarkerView : Charts.MarkerView {
  @objc(GTChartPMarkerViewCalendarPermission) public enum AleartType : Swift.Int {
    case duoKong = 10
    case baoCang
    case kongHuang
    case chiCang
    case daDan
    case bigOrder
    case updOwnData
    case newBaoCang
    case fearIndex
    case tradePairCalendar
    case newTimeStamp
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @_Concurrency.MainActor(unsafe) open var cycleSelectBlock: (_ index: ObjectiveC.NSInteger) -> Swift.Array<Any>
  @objc @_Concurrency.MainActor(unsafe) open var isMianNeight: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var is24H: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var isHiddenTime: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var Xmodels: [CoinTools.GTHomeTitleModel]?
  @objc @_Concurrency.MainActor(unsafe) open var xAxisValueFormatter: Charts.IAxisValueFormatter?
  @objc @_Concurrency.MainActor(unsafe) open var models: [CoinTools.GatePublicSelectModel]
  @objc @_Concurrency.MainActor(unsafe) open var stylemodels: [[Swift.String : Any]]
  @objc @_Concurrency.MainActor(unsafe) open var possArr: [Any]
  @objc @_Concurrency.MainActor(unsafe) open var lineChartView: Charts.LineChartView?
  @objc @_Concurrency.MainActor(unsafe) open var chartsView: Charts.CombinedChartView?
  @objc @_Concurrency.MainActor(unsafe) open var selectModels: [CoinTools.GatePublicSelectModel]
  @objc @_Concurrency.MainActor(unsafe) open var aleartType: CoinTools.GTChartPMarkerView.AleartType
  @IBOutlet @objc @_Concurrency.MainActor(unsafe) weak open var publicView: CoinTools.GTChartPMarkerPublicView!
  @objc override dynamic open func awakeFromNib()
  @objc @_Concurrency.MainActor(unsafe) public static func loadFromNib(_ nibname: Swift.String? = nil) -> Self
  @_Concurrency.MainActor(unsafe) @objc override open func draw(context: CoreGraphics.CGContext, point: CoreGraphics.CGPoint)
  @_Concurrency.MainActor(unsafe) @objc override open func refreshContent(entry: Charts.ChartDataEntry, highlight: Charts.Highlight)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CoinTools.HTNetworkStatus : Swift.Equatable {}
extension CoinTools.HTNetworkStatus : Swift.Hashable {}
extension CoinTools.HTNetworkStatus : Swift.RawRepresentable {}
extension CoinTools.methodType : Swift.Equatable {}
extension CoinTools.methodType : Swift.Hashable {}
extension Foundation.NSAttributedString.RZCondition : Swift.Equatable {}
extension Foundation.NSAttributedString.RZCondition : Swift.Hashable {}
extension Foundation.NSAttributedString.RZCondition : Swift.RawRepresentable {}
extension CoinTools.ConferInsertPositionRZ : Swift.Equatable {}
extension CoinTools.ConferInsertPositionRZ : Swift.Hashable {}
extension CoinTools.ConferInsertPositionRZ : Swift.RawRepresentable {}
extension CoinTools.TextAttributeRZ.WriteDirectionRZ : Swift.Equatable {}
extension CoinTools.TextAttributeRZ.WriteDirectionRZ : Swift.Hashable {}
extension CoinTools.GTV2ChartPMarkerView.AleartType : Swift.Equatable {}
extension CoinTools.GTV2ChartPMarkerView.AleartType : Swift.Hashable {}
extension CoinTools.GTV2ChartPMarkerView.AleartType : Swift.RawRepresentable {}
extension CoinTools.MySwiftThemes : Swift.Equatable {}
extension CoinTools.MySwiftThemes : Swift.Hashable {}
extension CoinTools.MySwiftThemes : Swift.RawRepresentable {}
extension CoinTools.YCLayoutAttribute : Swift.Equatable {}
extension CoinTools.YCLayoutAttribute : Swift.Hashable {}
extension CoinTools.YCLayoutAttribute : Swift.RawRepresentable {}
extension CoinTools.ImageAttachmentHorizontalAlignRZ : Swift.Equatable {}
extension CoinTools.ImageAttachmentHorizontalAlignRZ : Swift.Hashable {}
extension CoinTools.GTChartPMarkerView.AleartType : Swift.Equatable {}
extension CoinTools.GTChartPMarkerView.AleartType : Swift.Hashable {}
extension CoinTools.GTChartPMarkerView.AleartType : Swift.RawRepresentable {}
